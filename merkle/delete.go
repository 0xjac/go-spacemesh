package merkle

import (
	"encoding/hex"
	"errors"
	"github.com/spacemeshos/go-spacemesh/log"
)

// remove v keyed by k from the tree
func (mt *merkleTreeImp) Delete(k []byte) error {
	return errors.New("not implemented yet")
	if len(k) == 0 {
		return InvalidUserDataError
	}

	// first, attempt to find the value in the tree and return path to where value should be added
	// in the case it is not already in the tree
	res, stack, err := mt.Get(k)

	if res == nil || len(res) == 0 || err != nil {
		return nil
	}

	mt.deleteUserValueFromStorge(res)

	hexKey := hex.EncodeToString(k)
	log.Info("m Deleting user data for key: %s...", hexKey)

	// todo - optimize this to avoid iteration over path
	pos := mt.getPathLength(stack)

	// Use the branch to insert or update the value generated by the Get() op above
	err = mt.delete(pos, hexKey, stack)
	if err != nil {
		return err
	}

	return nil
}

// deletes value from node at top of the stack from the tree
func (mt *merkleTreeImp) delete(pos int, k string, s *stack) error {

	// todo: implement me
	return nil
}