// Code generated by protoc-gen-go. DO NOT EDIT.
// source: handshake.proto

/*
Package pb is a generated protocol buffer package.

It is generated from these files:
	handshake.proto

It has these top-level messages:
	CommonMessageData
	HandshakeData
	ProtocolMessage
	EchoRequest
*/
package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// data common to all messages
type CommonMessageData struct {
	SessionId []byte `protobuf:"bytes,1,opt,name=sessionId,proto3" json:"sessionId,omitempty"`
	Payload   []byte `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (m *CommonMessageData) Reset()                    { *m = CommonMessageData{} }
func (m *CommonMessageData) String() string            { return proto.CompactTextString(m) }
func (*CommonMessageData) ProtoMessage()               {}
func (*CommonMessageData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *CommonMessageData) GetSessionId() []byte {
	if m != nil {
		return m.SessionId
	}
	return nil
}

func (m *CommonMessageData) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

// used for both request and response - sent unencrypted on the wire
type HandshakeData struct {
	SessionId  []byte `protobuf:"bytes,1,opt,name=sessionId,proto3" json:"sessionId,omitempty"`
	Payload    []byte `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
	Protocol   string `protobuf:"bytes,3,opt,name=protocol" json:"protocol,omitempty"`
	NodePubKey []byte `protobuf:"bytes,4,opt,name=nodePubKey,proto3" json:"nodePubKey,omitempty"`
	Iv         []byte `protobuf:"bytes,5,opt,name=iv,proto3" json:"iv,omitempty"`
	PubKey     []byte `protobuf:"bytes,6,opt,name=pubKey,proto3" json:"pubKey,omitempty"`
	Hmac       []byte `protobuf:"bytes,7,opt,name=hmac,proto3" json:"hmac,omitempty"`
	Sign       string `protobuf:"bytes,8,opt,name=sign" json:"sign,omitempty"`
}

func (m *HandshakeData) Reset()                    { *m = HandshakeData{} }
func (m *HandshakeData) String() string            { return proto.CompactTextString(m) }
func (*HandshakeData) ProtoMessage()               {}
func (*HandshakeData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *HandshakeData) GetSessionId() []byte {
	if m != nil {
		return m.SessionId
	}
	return nil
}

func (m *HandshakeData) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *HandshakeData) GetProtocol() string {
	if m != nil {
		return m.Protocol
	}
	return ""
}

func (m *HandshakeData) GetNodePubKey() []byte {
	if m != nil {
		return m.NodePubKey
	}
	return nil
}

func (m *HandshakeData) GetIv() []byte {
	if m != nil {
		return m.Iv
	}
	return nil
}

func (m *HandshakeData) GetPubKey() []byte {
	if m != nil {
		return m.PubKey
	}
	return nil
}

func (m *HandshakeData) GetHmac() []byte {
	if m != nil {
		return m.Hmac
	}
	return nil
}

func (m *HandshakeData) GetSign() string {
	if m != nil {
		return m.Sign
	}
	return ""
}

// used for protocol messages (non-handshake)
type ProtocolMessage struct {
	Protocol string `protobuf:"bytes,1,opt,name=protocol" json:"protocol,omitempty"`
	ReqId    []byte `protobuf:"bytes,2,opt,name=reqId,proto3" json:"reqId,omitempty"`
}

func (m *ProtocolMessage) Reset()                    { *m = ProtocolMessage{} }
func (m *ProtocolMessage) String() string            { return proto.CompactTextString(m) }
func (*ProtocolMessage) ProtoMessage()               {}
func (*ProtocolMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *ProtocolMessage) GetProtocol() string {
	if m != nil {
		return m.Protocol
	}
	return ""
}

func (m *ProtocolMessage) GetReqId() []byte {
	if m != nil {
		return m.ReqId
	}
	return nil
}

// example protocol message
type EchoRequest struct {
	Protocol string `protobuf:"bytes,1,opt,name=protocol" json:"protocol,omitempty"`
	ReqId    []byte `protobuf:"bytes,2,opt,name=reqId,proto3" json:"reqId,omitempty"`
	Message  string `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *EchoRequest) Reset()                    { *m = EchoRequest{} }
func (m *EchoRequest) String() string            { return proto.CompactTextString(m) }
func (*EchoRequest) ProtoMessage()               {}
func (*EchoRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *EchoRequest) GetProtocol() string {
	if m != nil {
		return m.Protocol
	}
	return ""
}

func (m *EchoRequest) GetReqId() []byte {
	if m != nil {
		return m.ReqId
	}
	return nil
}

func (m *EchoRequest) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func init() {
	proto.RegisterType((*CommonMessageData)(nil), "pb.CommonMessageData")
	proto.RegisterType((*HandshakeData)(nil), "pb.HandshakeData")
	proto.RegisterType((*ProtocolMessage)(nil), "pb.ProtocolMessage")
	proto.RegisterType((*EchoRequest)(nil), "pb.EchoRequest")
}

func init() { proto.RegisterFile("handshake.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 263 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x90, 0x4f, 0x4b, 0xc3, 0x40,
	0x10, 0xc5, 0xc9, 0x9a, 0xa6, 0xed, 0xf8, 0xa7, 0x38, 0x88, 0x2c, 0x22, 0x52, 0x72, 0xea, 0xc9,
	0x8b, 0xdf, 0xc0, 0x2a, 0x58, 0x8a, 0x50, 0x72, 0xd3, 0xdb, 0x26, 0x19, 0x9a, 0x60, 0xb3, 0xb3,
	0xed, 0xa6, 0x85, 0x7e, 0x4e, 0xbf, 0x90, 0x74, 0x92, 0xf8, 0xef, 0x26, 0xde, 0xe6, 0xfd, 0x92,
	0x99, 0xf7, 0xf6, 0xc1, 0xa8, 0x30, 0x36, 0xf7, 0x85, 0x79, 0xa3, 0x5b, 0xb7, 0xe1, 0x9a, 0x51,
	0xb9, 0x34, 0x9e, 0xc3, 0xf9, 0x94, 0xab, 0x8a, 0xed, 0x33, 0x79, 0x6f, 0x96, 0xf4, 0x60, 0x6a,
	0x83, 0xd7, 0x30, 0xf4, 0xe4, 0x7d, 0xc9, 0x76, 0x96, 0xeb, 0x60, 0x1c, 0x4c, 0x4e, 0x92, 0x2f,
	0x80, 0x1a, 0xfa, 0xce, 0xec, 0x57, 0x6c, 0x72, 0xad, 0xe4, 0x5b, 0x27, 0xe3, 0xf7, 0x00, 0x4e,
	0x9f, 0x3a, 0x93, 0xff, 0x5c, 0xc2, 0x2b, 0x18, 0x48, 0xc6, 0x8c, 0x57, 0xfa, 0x68, 0x1c, 0x4c,
	0x86, 0xc9, 0xa7, 0xc6, 0x1b, 0x00, 0xcb, 0x39, 0x2d, 0xb6, 0xe9, 0x9c, 0xf6, 0x3a, 0x94, 0xc5,
	0x6f, 0x04, 0xcf, 0x40, 0x95, 0x3b, 0xdd, 0x13, 0xae, 0xca, 0x1d, 0x5e, 0x42, 0xe4, 0x9a, 0x7f,
	0x23, 0x61, 0xad, 0x42, 0x84, 0xb0, 0xa8, 0x4c, 0xa6, 0xfb, 0x42, 0x65, 0x3e, 0x30, 0x5f, 0x2e,
	0xad, 0x1e, 0x88, 0xa7, 0xcc, 0xf1, 0x14, 0x46, 0x8b, 0xd6, 0xbb, 0x2d, 0xe9, 0x47, 0xbc, 0xe0,
	0x57, 0xbc, 0x0b, 0xe8, 0x6d, 0x68, 0x3d, 0xeb, 0x9e, 0xd4, 0x88, 0xf8, 0x05, 0x8e, 0x1f, 0xb3,
	0x82, 0x13, 0x5a, 0x6f, 0xc9, 0xd7, 0x7f, 0x3f, 0x70, 0xe8, 0xaa, 0x6a, 0xdc, 0xdb, 0x42, 0x3a,
	0x79, 0x1f, 0xbe, 0x2a, 0x97, 0xa6, 0x91, 0xec, 0xdf, 0x7d, 0x04, 0x00, 0x00, 0xff, 0xff, 0xfc,
	0x83, 0x42, 0xee, 0xe6, 0x01, 0x00, 0x00,
}
