// Code generated by protoc-gen-go. DO NOT EDIT.
// source: handshake.proto

/*
Package pb is a generated protocol buffer package.

It is generated from these files:
	handshake.proto

It has these top-level messages:
	CommonMessageData
	HandshakeData
	ProtocolMessage
	Metadata
	PingReqData
	PongRespData
*/
package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// data common to all messages - Top level msg format
type CommonMessageData struct {
	SessionId []byte `protobuf:"bytes,1,opt,name=sessionId,proto3" json:"sessionId,omitempty"`
	Payload   []byte `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (m *CommonMessageData) Reset()                    { *m = CommonMessageData{} }
func (m *CommonMessageData) String() string            { return proto.CompactTextString(m) }
func (*CommonMessageData) ProtoMessage()               {}
func (*CommonMessageData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *CommonMessageData) GetSessionId() []byte {
	if m != nil {
		return m.SessionId
	}
	return nil
}

func (m *CommonMessageData) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

// Handshake protocol data used for both request and response - sent unencrypted on the wire
type HandshakeData struct {
	SessionId  []byte `protobuf:"bytes,1,opt,name=sessionId,proto3" json:"sessionId,omitempty"`
	Payload    []byte `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
	Protocol   string `protobuf:"bytes,3,opt,name=protocol" json:"protocol,omitempty"`
	NodePubKey []byte `protobuf:"bytes,4,opt,name=nodePubKey,proto3" json:"nodePubKey,omitempty"`
	Iv         []byte `protobuf:"bytes,5,opt,name=iv,proto3" json:"iv,omitempty"`
	PubKey     []byte `protobuf:"bytes,6,opt,name=pubKey,proto3" json:"pubKey,omitempty"`
	Hmac       []byte `protobuf:"bytes,7,opt,name=hmac,proto3" json:"hmac,omitempty"`
	TcpAddress string `protobuf:"bytes,8,opt,name=tcpAddress" json:"tcpAddress,omitempty"`
	Sign       string `protobuf:"bytes,9,opt,name=sign" json:"sign,omitempty"`
}

func (m *HandshakeData) Reset()                    { *m = HandshakeData{} }
func (m *HandshakeData) String() string            { return proto.CompactTextString(m) }
func (*HandshakeData) ProtoMessage()               {}
func (*HandshakeData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *HandshakeData) GetSessionId() []byte {
	if m != nil {
		return m.SessionId
	}
	return nil
}

func (m *HandshakeData) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *HandshakeData) GetProtocol() string {
	if m != nil {
		return m.Protocol
	}
	return ""
}

func (m *HandshakeData) GetNodePubKey() []byte {
	if m != nil {
		return m.NodePubKey
	}
	return nil
}

func (m *HandshakeData) GetIv() []byte {
	if m != nil {
		return m.Iv
	}
	return nil
}

func (m *HandshakeData) GetPubKey() []byte {
	if m != nil {
		return m.PubKey
	}
	return nil
}

func (m *HandshakeData) GetHmac() []byte {
	if m != nil {
		return m.Hmac
	}
	return nil
}

func (m *HandshakeData) GetTcpAddress() string {
	if m != nil {
		return m.TcpAddress
	}
	return ""
}

func (m *HandshakeData) GetSign() string {
	if m != nil {
		return m.Sign
	}
	return ""
}

// used for protocol messages (non-handshake) - this is the decrypted CommonMessageData.payload
// it allows multiplexing back to higher level protocol
// data is here and not in CommonMessageData to limit leaked data on unencrypted connections
type ProtocolMessage struct {
	Protocol string `protobuf:"bytes,1,opt,name=protocol" json:"protocol,omitempty"`
	ReqId    []byte `protobuf:"bytes,2,opt,name=reqId,proto3" json:"reqId,omitempty"`
}

func (m *ProtocolMessage) Reset()                    { *m = ProtocolMessage{} }
func (m *ProtocolMessage) String() string            { return proto.CompactTextString(m) }
func (*ProtocolMessage) ProtoMessage()               {}
func (*ProtocolMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *ProtocolMessage) GetProtocol() string {
	if m != nil {
		return m.Protocol
	}
	return ""
}

func (m *ProtocolMessage) GetReqId() []byte {
	if m != nil {
		return m.ReqId
	}
	return nil
}

type Metadata struct {
	ClientVersion string `protobuf:"bytes,1,opt,name=clientVersion" json:"clientVersion,omitempty"`
	Timestamp     int64  `protobuf:"varint,2,opt,name=timestamp" json:"timestamp,omitempty"`
	Gossip        bool   `protobuf:"varint,3,opt,name=gossip" json:"gossip,omitempty"`
	Author        string `protobuf:"bytes,4,opt,name=author" json:"author,omitempty"`
	NodePubKey    []byte `protobuf:"bytes,5,opt,name=nodePubKey,proto3" json:"nodePubKey,omitempty"`
	AuthorSign    string `protobuf:"bytes,6,opt,name=authorSign" json:"authorSign,omitempty"`
}

func (m *Metadata) Reset()                    { *m = Metadata{} }
func (m *Metadata) String() string            { return proto.CompactTextString(m) }
func (*Metadata) ProtoMessage()               {}
func (*Metadata) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Metadata) GetClientVersion() string {
	if m != nil {
		return m.ClientVersion
	}
	return ""
}

func (m *Metadata) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *Metadata) GetGossip() bool {
	if m != nil {
		return m.Gossip
	}
	return false
}

func (m *Metadata) GetAuthor() string {
	if m != nil {
		return m.Author
	}
	return ""
}

func (m *Metadata) GetNodePubKey() []byte {
	if m != nil {
		return m.NodePubKey
	}
	return nil
}

func (m *Metadata) GetAuthorSign() string {
	if m != nil {
		return m.AuthorSign
	}
	return ""
}

// example protocol
type PingReqData struct {
	Protocol string    `protobuf:"bytes,1,opt,name=protocol" json:"protocol,omitempty"`
	ReqId    []byte    `protobuf:"bytes,2,opt,name=reqId,proto3" json:"reqId,omitempty"`
	Data     *Metadata `protobuf:"bytes,3,opt,name=data" json:"data,omitempty"`
	Ping     string    `protobuf:"bytes,4,opt,name=ping" json:"ping,omitempty"`
}

func (m *PingReqData) Reset()                    { *m = PingReqData{} }
func (m *PingReqData) String() string            { return proto.CompactTextString(m) }
func (*PingReqData) ProtoMessage()               {}
func (*PingReqData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *PingReqData) GetProtocol() string {
	if m != nil {
		return m.Protocol
	}
	return ""
}

func (m *PingReqData) GetReqId() []byte {
	if m != nil {
		return m.ReqId
	}
	return nil
}

func (m *PingReqData) GetData() *Metadata {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *PingReqData) GetPing() string {
	if m != nil {
		return m.Ping
	}
	return ""
}

type PongRespData struct {
	Protocol string    `protobuf:"bytes,1,opt,name=protocol" json:"protocol,omitempty"`
	ReqId    []byte    `protobuf:"bytes,2,opt,name=reqId,proto3" json:"reqId,omitempty"`
	Data     *Metadata `protobuf:"bytes,3,opt,name=data" json:"data,omitempty"`
	Pong     string    `protobuf:"bytes,4,opt,name=pong" json:"pong,omitempty"`
}

func (m *PongRespData) Reset()                    { *m = PongRespData{} }
func (m *PongRespData) String() string            { return proto.CompactTextString(m) }
func (*PongRespData) ProtoMessage()               {}
func (*PongRespData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *PongRespData) GetProtocol() string {
	if m != nil {
		return m.Protocol
	}
	return ""
}

func (m *PongRespData) GetReqId() []byte {
	if m != nil {
		return m.ReqId
	}
	return nil
}

func (m *PongRespData) GetData() *Metadata {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *PongRespData) GetPong() string {
	if m != nil {
		return m.Pong
	}
	return ""
}

func init() {
	proto.RegisterType((*CommonMessageData)(nil), "pb.CommonMessageData")
	proto.RegisterType((*HandshakeData)(nil), "pb.HandshakeData")
	proto.RegisterType((*ProtocolMessage)(nil), "pb.ProtocolMessage")
	proto.RegisterType((*Metadata)(nil), "pb.Metadata")
	proto.RegisterType((*PingReqData)(nil), "pb.PingReqData")
	proto.RegisterType((*PongRespData)(nil), "pb.PongRespData")
}

func init() { proto.RegisterFile("handshake.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 390 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x91, 0x4f, 0xcb, 0xd3, 0x40,
	0x10, 0xc6, 0x49, 0xde, 0x34, 0x4d, 0xa6, 0xad, 0xc5, 0x45, 0x64, 0x11, 0x29, 0x25, 0x78, 0xe8,
	0xa9, 0x07, 0xfd, 0x04, 0x5a, 0x0f, 0x96, 0x52, 0x08, 0x11, 0x3c, 0x78, 0xdb, 0x24, 0x4b, 0xb2,
	0xd8, 0xec, 0x6e, 0xb3, 0xdb, 0x42, 0xbf, 0x9c, 0x5f, 0xca, 0x2f, 0x20, 0x3b, 0x49, 0xec, 0x1f,
	0x4f, 0x22, 0xef, 0x6d, 0x9e, 0x67, 0xb2, 0x33, 0xcf, 0xfc, 0x02, 0xf3, 0x9a, 0xc9, 0xd2, 0xd4,
	0xec, 0x07, 0x5f, 0xeb, 0x56, 0x59, 0x45, 0x7c, 0x9d, 0x27, 0x3b, 0x78, 0xb9, 0x51, 0x4d, 0xa3,
	0xe4, 0x9e, 0x1b, 0xc3, 0x2a, 0xfe, 0x99, 0x59, 0x46, 0xde, 0x42, 0x6c, 0xb8, 0x31, 0x42, 0xc9,
	0x6d, 0x49, 0xbd, 0xa5, 0xb7, 0x9a, 0x66, 0x57, 0x83, 0x50, 0x18, 0x6b, 0x76, 0x39, 0x28, 0x56,
	0x52, 0x1f, 0x7b, 0x83, 0x4c, 0x7e, 0x79, 0x30, 0xfb, 0x32, 0x2c, 0xf9, 0x9f, 0x49, 0xe4, 0x0d,
	0x44, 0x98, 0xb1, 0x50, 0x07, 0xfa, 0xb4, 0xf4, 0x56, 0x71, 0xf6, 0x47, 0x93, 0x05, 0x80, 0x54,
	0x25, 0x4f, 0x4f, 0xf9, 0x8e, 0x5f, 0x68, 0x80, 0x0f, 0x6f, 0x1c, 0xf2, 0x02, 0x7c, 0x71, 0xa6,
	0x23, 0xf4, 0x7d, 0x71, 0x26, 0xaf, 0x21, 0xd4, 0xdd, 0xb7, 0x21, 0x7a, 0xbd, 0x22, 0x04, 0x82,
	0xba, 0x61, 0x05, 0x1d, 0xa3, 0x8b, 0xb5, 0x9b, 0x6d, 0x0b, 0xfd, 0xb1, 0x2c, 0x5b, 0x6e, 0x0c,
	0x8d, 0x70, 0xf3, 0x8d, 0xe3, 0xde, 0x18, 0x51, 0x49, 0x1a, 0x63, 0x07, 0xeb, 0x64, 0x03, 0xf3,
	0xb4, 0xcf, 0xd6, 0x43, 0xbc, 0x8b, 0xef, 0x3d, 0xc4, 0x7f, 0x05, 0xa3, 0x96, 0x1f, 0xb7, 0xc3,
	0xc9, 0x9d, 0x48, 0x7e, 0x7a, 0x10, 0xed, 0xb9, 0x65, 0xa5, 0xa3, 0xf6, 0x0e, 0x66, 0xc5, 0x41,
	0x70, 0x69, 0xbf, 0xf1, 0xd6, 0xa1, 0xea, 0x67, 0xdc, 0x9b, 0x8e, 0xad, 0x15, 0x0d, 0x37, 0x96,
	0x35, 0x1a, 0x87, 0x3d, 0x65, 0x57, 0xc3, 0x5d, 0x5d, 0x29, 0x63, 0x84, 0x46, 0x7e, 0x51, 0xd6,
	0x2b, 0xe7, 0xb3, 0x93, 0xad, 0x55, 0x8b, 0xe4, 0xe2, 0xac, 0x57, 0x0f, 0x54, 0x47, 0x7f, 0x51,
	0x5d, 0x00, 0x74, 0x5f, 0x7e, 0x75, 0xf7, 0x87, 0x1d, 0x99, 0xab, 0x93, 0x9c, 0x60, 0x92, 0x0a,
	0x59, 0x65, 0xfc, 0x88, 0x3f, 0xfe, 0x9f, 0x09, 0x90, 0x25, 0x04, 0xee, 0x78, 0x8c, 0x3b, 0x79,
	0x3f, 0x5d, 0xeb, 0x7c, 0x3d, 0x00, 0xc9, 0xb0, 0xe3, 0xe0, 0x6b, 0x21, 0xab, 0x3e, 0x38, 0xd6,
	0xc9, 0x19, 0xa6, 0xa9, 0x72, 0x6b, 0x8d, 0x7e, 0xd6, 0xbd, 0xea, 0x66, 0xaf, 0x92, 0xd5, 0xa7,
	0xe0, 0xbb, 0xaf, 0xf3, 0x3c, 0xc4, 0xd9, 0x1f, 0x7e, 0x07, 0x00, 0x00, 0xff, 0xff, 0x0c, 0xbd,
	0xb7, 0xd3, 0x5b, 0x03, 0x00, 0x00,
}
