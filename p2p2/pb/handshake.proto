syntax = "proto3";

package pb;
option go_package = "pb";

// Handshake protocol message format

// data common to all messages
message CommonMessageData {
    bytes sessionId = 1;  // always set (handshake or other protocol messages)
    bytes payload = 2;    // encrypted payload with session aes key - binary protobufs. empty for handshake methods
    // we don't want to add anything here even protocol names as it goes unencrypted over the wire
}

// used for both request and response - sent unencrypted on the wire
message HandshakeData {
    bytes sessionId = 1;
    bytes payload = 2; // empty for now
    string protocol = 3; // 'handshake/req' || 'handshake/resp'
    bytes nodePubKey = 4; // 65 bytes uncompressed
    bytes iv = 5; // 16 bytes - AES-256-CBC IV
    bytes pubKey = 6; // 65 bytes (uncompressed) ephemeral public key
    bytes hmac = 7; // HMAC-SHA-256 32 bytes
    string sign = 8; // hex encoded string 32 bytes sign of all above data by node public key (verifies he has the priv key and he wrote the data
}

// handshake message:


// just here for now

// used for protocol messages (non-handshake)
message ProtocolMessage {
    string protocol = 1;
    bytes reqId = 2;
}

// example protocol message
message EchoRequest {
    string protocol = 1; // protocol must be first field
    bytes reqId = 2;     // required field - none for requests. protocol req id for respones
    string message = 3; // the echo message itself - protocol specific - starts at #3
}